/*----- PROTECTED REGION ID(CppBenchmarkTargetClass.cpp) ENABLED START -----*/
//=============================================================================
//
// file :        CppBenchmarkTargetClass.cpp
//
// description : C++ source for the CppBenchmarkTargetClass.
//               A singleton class derived from DeviceClass.
//               It implements the command and attribute list
//               and all properties and methods required
//               by the CppBenchmarkTarget once per process.
//
// project :     Benchmark device
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <CppBenchmarkTargetClass.h>

/*----- PROTECTED REGION END -----*/	//	CppBenchmarkTargetClass.cpp

//-------------------------------------------------------------------
/**
 *	Create CppBenchmarkTargetClass singleton and
 *	return it in a C function for Python usage
 */
//-------------------------------------------------------------------
extern "C" {
#ifdef _TG_WINDOWS_

__declspec(dllexport)

#endif

	Tango::DeviceClass *_create_CppBenchmarkTarget_class(const char *name) {
		return CppBenchmarkTarget_ns::CppBenchmarkTargetClass::init(name);
	}
}

namespace CppBenchmarkTarget_ns
{
//===================================================================
//	Initialize pointer for singleton pattern
//===================================================================
CppBenchmarkTargetClass *CppBenchmarkTargetClass::_instance = NULL;

//--------------------------------------------------------
/**
 * method : 		CppBenchmarkTargetClass::CppBenchmarkTargetClass(string &s)
 * description : 	constructor for the CppBenchmarkTargetClass
 *
 * @param s	The class name
 */
//--------------------------------------------------------
CppBenchmarkTargetClass::CppBenchmarkTargetClass(string &s):Tango::DeviceClass(s)
{
	cout2 << "Entering CppBenchmarkTargetClass constructor" << endl;
	set_default_property();
	write_class_property();

	/*----- PROTECTED REGION ID(CppBenchmarkTargetClass::constructor) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	CppBenchmarkTargetClass::constructor

	cout2 << "Leaving CppBenchmarkTargetClass constructor" << endl;
}

//--------------------------------------------------------
/**
 * method : 		CppBenchmarkTargetClass::~CppBenchmarkTargetClass()
 * description : 	destructor for the CppBenchmarkTargetClass
 */
//--------------------------------------------------------
CppBenchmarkTargetClass::~CppBenchmarkTargetClass()
{
	/*----- PROTECTED REGION ID(CppBenchmarkTargetClass::destructor) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	CppBenchmarkTargetClass::destructor

	_instance = NULL;
}


//--------------------------------------------------------
/**
 * method : 		CppBenchmarkTargetClass::init
 * description : 	Create the object if not already done.
 *                  Otherwise, just return a pointer to the object
 *
 * @param	name	The class name
 */
//--------------------------------------------------------
CppBenchmarkTargetClass *CppBenchmarkTargetClass::init(const char *name)
{
	if (_instance == NULL)
	{
		try
		{
			string s(name);
			_instance = new CppBenchmarkTargetClass(s);
		}
		catch (bad_alloc &)
		{
			throw;
		}
	}
	return _instance;
}

//--------------------------------------------------------
/**
 * method : 		CppBenchmarkTargetClass::instance
 * description : 	Check if object already created,
 *                  and return a pointer to the object
 */
//--------------------------------------------------------
CppBenchmarkTargetClass *CppBenchmarkTargetClass::instance()
{
	if (_instance == NULL)
	{
		cerr << "Class is not initialised !!" << endl;
		exit(-1);
	}
	return _instance;
}



//===================================================================
//	Command execution method calls
//===================================================================
//--------------------------------------------------------
/**
 * method : 		BenchmarkCommandClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *BenchmarkCommandClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "BenchmarkCommandClass::execute(): arrived" << endl;
	((static_cast<CppBenchmarkTarget *>(device))->benchmark_command());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SetSpectrumSizeClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetSpectrumSizeClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetSpectrumSizeClass::execute(): arrived" << endl;
	Tango::DevLong argin;
	extract(in_any, argin);
	((static_cast<CppBenchmarkTarget *>(device))->set_spectrum_size(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SetImageSizeClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetImageSizeClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetImageSizeClass::execute(): arrived" << endl;
	const Tango::DevVarLongArray *argin;
	extract(in_any, argin);
	((static_cast<CppBenchmarkTarget *>(device))->set_image_size(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		ResetCountersClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ResetCountersClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "ResetCountersClass::execute(): arrived" << endl;
	((static_cast<CppBenchmarkTarget *>(device))->reset_counters());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		StartScalarEventsClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *StartScalarEventsClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "StartScalarEventsClass::execute(): arrived" << endl;
	((static_cast<CppBenchmarkTarget *>(device))->start_scalar_events());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		StopScalarEventsClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *StopScalarEventsClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "StopScalarEventsClass::execute(): arrived" << endl;
	((static_cast<CppBenchmarkTarget *>(device))->stop_scalar_events());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		PushScalarEventClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *PushScalarEventClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "PushScalarEventClass::execute(): arrived" << endl;
	((static_cast<CppBenchmarkTarget *>(device))->push_scalar_event());
	return new CORBA::Any();
}


//===================================================================
//	Properties management
//===================================================================
//--------------------------------------------------------
/**
 *	Method      : CppBenchmarkTargetClass::get_class_property()
 *	Description : Get the class property for specified name.
 */
//--------------------------------------------------------
Tango::DbDatum CppBenchmarkTargetClass::get_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_prop.size() ; i++)
		if (cl_prop[i].name == prop_name)
			return cl_prop[i];
	//	if not found, returns  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//--------------------------------------------------------
/**
 *	Method      : CppBenchmarkTargetClass::get_default_device_property()
 *	Description : Return the default value for device property.
 */
//--------------------------------------------------------
Tango::DbDatum CppBenchmarkTargetClass::get_default_device_property(string &prop_name)
{
	for (unsigned int i=0 ; i<dev_def_prop.size() ; i++)
		if (dev_def_prop[i].name == prop_name)
			return dev_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//--------------------------------------------------------
/**
 *	Method      : CppBenchmarkTargetClass::get_default_class_property()
 *	Description : Return the default value for class property.
 */
//--------------------------------------------------------
Tango::DbDatum CppBenchmarkTargetClass::get_default_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_def_prop.size() ; i++)
		if (cl_def_prop[i].name == prop_name)
			return cl_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}


//--------------------------------------------------------
/**
 *	Method      : CppBenchmarkTargetClass::set_default_property()
 *	Description : Set default property (class and device) for wizard.
 *                For each property, add to wizard property name and description.
 *                If default value has been set, add it to wizard property and
 *                store it in a DbDatum.
 */
//--------------------------------------------------------
void CppBenchmarkTargetClass::set_default_property()
{
	string	prop_name;
	string	prop_desc;
	string	prop_def;
	vector<string>	vect_data;

	//	Set Default Class Properties

	//	Set Default device Properties
}

//--------------------------------------------------------
/**
 *	Method      : CppBenchmarkTargetClass::write_class_property()
 *	Description : Set class description fields as property in database
 */
//--------------------------------------------------------
void CppBenchmarkTargetClass::write_class_property()
{
	//	First time, check if database used
	if (Tango::Util::_UseDb == false)
		return;

	Tango::DbData	data;
	string	classname = get_name();
	string	header;
	string::size_type	start, end;

	//	Put title
	Tango::DbDatum	title("ProjectTitle");
	string	str_title("Benchmark device");
	title << str_title;
	data.push_back(title);

	//	Put Description
	Tango::DbDatum	description("Description");
	vector<string>	str_desc;
	str_desc.push_back("Benchmark device for counting attribute, command and pipe calls");
	description << str_desc;
	data.push_back(description);

	//  Put inheritance
	Tango::DbDatum	inher_datum("InheritedFrom");
	vector<string> inheritance;
	inheritance.push_back("TANGO_BASE_CLASS");
	inher_datum << inheritance;
	data.push_back(inher_datum);

	//	Call database and and values
	get_db_class()->put_property(data);
}

//===================================================================
//	Factory methods
//===================================================================

//--------------------------------------------------------
/**
 *	Method      : CppBenchmarkTargetClass::device_factory()
 *	Description : Create the device object(s)
 *                and store them in the device list
 */
//--------------------------------------------------------
void CppBenchmarkTargetClass::device_factory(const Tango::DevVarStringArray *devlist_ptr)
{
	/*----- PROTECTED REGION ID(CppBenchmarkTargetClass::device_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	CppBenchmarkTargetClass::device_factory_before

	//	Create devices and add it into the device list
	for (unsigned long i=0 ; i<devlist_ptr->length() ; i++)
	{
		cout4 << "Device name : " << (*devlist_ptr)[i].in() << endl;
		device_list.push_back(new CppBenchmarkTarget(this, (*devlist_ptr)[i]));
	}

	//	Manage dynamic attributes if any
	erase_dynamic_attributes(devlist_ptr, get_class_attr()->get_attr_list());

	//	Export devices to the outside world
	for (unsigned long i=1 ; i<=devlist_ptr->length() ; i++)
	{
		//	Add dynamic attributes if any
		CppBenchmarkTarget *dev = static_cast<CppBenchmarkTarget *>(device_list[device_list.size()-i]);
		dev->add_dynamic_attributes();

		//	Check before if database used.
		if ((Tango::Util::_UseDb == true) && (Tango::Util::_FileDb == false))
			export_device(dev);
		else
			export_device(dev, dev->get_name().c_str());
	}

	/*----- PROTECTED REGION ID(CppBenchmarkTargetClass::device_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	CppBenchmarkTargetClass::device_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : CppBenchmarkTargetClass::attribute_factory()
 *	Description : Create the attribute object(s)
 *                and store them in the attribute list
 */
//--------------------------------------------------------
void CppBenchmarkTargetClass::attribute_factory(vector<Tango::Attr *> &att_list)
{
	/*----- PROTECTED REGION ID(CppBenchmarkTargetClass::attribute_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	CppBenchmarkTargetClass::attribute_factory_before
	//	Attribute : BenchmarkScalarAttribute
	BenchmarkScalarAttributeAttrib	*benchmarkscalarattribute = new BenchmarkScalarAttributeAttrib();
	Tango::UserDefaultAttrProp	benchmarkscalarattribute_prop;
	benchmarkscalarattribute_prop.set_description("benchmark scalar attribute");
	//	label	not set for BenchmarkScalarAttribute
	//	unit	not set for BenchmarkScalarAttribute
	//	standard_unit	not set for BenchmarkScalarAttribute
	//	display_unit	not set for BenchmarkScalarAttribute
	//	format	not set for BenchmarkScalarAttribute
	//	max_value	not set for BenchmarkScalarAttribute
	//	min_value	not set for BenchmarkScalarAttribute
	//	max_alarm	not set for BenchmarkScalarAttribute
	//	min_alarm	not set for BenchmarkScalarAttribute
	//	max_warning	not set for BenchmarkScalarAttribute
	//	min_warning	not set for BenchmarkScalarAttribute
	//	delta_t	not set for BenchmarkScalarAttribute
	//	delta_val	not set for BenchmarkScalarAttribute
	
	benchmarkscalarattribute->set_default_properties(benchmarkscalarattribute_prop);
	//	Not Polled
	benchmarkscalarattribute->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	benchmarkscalarattribute->set_change_event(true, false);
	att_list.push_back(benchmarkscalarattribute);

	//	Attribute : AlwaysExecutedHookCount
	AlwaysExecutedHookCountAttrib	*alwaysexecutedhookcount = new AlwaysExecutedHookCountAttrib();
	Tango::UserDefaultAttrProp	alwaysexecutedhookcount_prop;
	alwaysexecutedhookcount_prop.set_description("always executed hook count");
	//	label	not set for AlwaysExecutedHookCount
	//	unit	not set for AlwaysExecutedHookCount
	//	standard_unit	not set for AlwaysExecutedHookCount
	//	display_unit	not set for AlwaysExecutedHookCount
	//	format	not set for AlwaysExecutedHookCount
	//	max_value	not set for AlwaysExecutedHookCount
	//	min_value	not set for AlwaysExecutedHookCount
	//	max_alarm	not set for AlwaysExecutedHookCount
	//	min_alarm	not set for AlwaysExecutedHookCount
	//	max_warning	not set for AlwaysExecutedHookCount
	//	min_warning	not set for AlwaysExecutedHookCount
	//	delta_t	not set for AlwaysExecutedHookCount
	//	delta_val	not set for AlwaysExecutedHookCount
	
	alwaysexecutedhookcount->set_default_properties(alwaysexecutedhookcount_prop);
	//	Not Polled
	alwaysexecutedhookcount->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(alwaysexecutedhookcount);

	//	Attribute : ReadAttributeHardwareCount
	ReadAttributeHardwareCountAttrib	*readattributehardwarecount = new ReadAttributeHardwareCountAttrib();
	Tango::UserDefaultAttrProp	readattributehardwarecount_prop;
	readattributehardwarecount_prop.set_description("read attribute hardware count");
	//	label	not set for ReadAttributeHardwareCount
	//	unit	not set for ReadAttributeHardwareCount
	//	standard_unit	not set for ReadAttributeHardwareCount
	//	display_unit	not set for ReadAttributeHardwareCount
	//	format	not set for ReadAttributeHardwareCount
	//	max_value	not set for ReadAttributeHardwareCount
	//	min_value	not set for ReadAttributeHardwareCount
	//	max_alarm	not set for ReadAttributeHardwareCount
	//	min_alarm	not set for ReadAttributeHardwareCount
	//	max_warning	not set for ReadAttributeHardwareCount
	//	min_warning	not set for ReadAttributeHardwareCount
	//	delta_t	not set for ReadAttributeHardwareCount
	//	delta_val	not set for ReadAttributeHardwareCount
	
	readattributehardwarecount->set_default_properties(readattributehardwarecount_prop);
	//	Not Polled
	readattributehardwarecount->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(readattributehardwarecount);

	//	Attribute : WriteAttributeCounterCount
	WriteAttributeCounterCountAttrib	*writeattributecountercount = new WriteAttributeCounterCountAttrib();
	Tango::UserDefaultAttrProp	writeattributecountercount_prop;
	writeattributecountercount_prop.set_description("write attribute counter count");
	//	label	not set for WriteAttributeCounterCount
	//	unit	not set for WriteAttributeCounterCount
	//	standard_unit	not set for WriteAttributeCounterCount
	//	display_unit	not set for WriteAttributeCounterCount
	//	format	not set for WriteAttributeCounterCount
	//	max_value	not set for WriteAttributeCounterCount
	//	min_value	not set for WriteAttributeCounterCount
	//	max_alarm	not set for WriteAttributeCounterCount
	//	min_alarm	not set for WriteAttributeCounterCount
	//	max_warning	not set for WriteAttributeCounterCount
	//	min_warning	not set for WriteAttributeCounterCount
	//	delta_t	not set for WriteAttributeCounterCount
	//	delta_val	not set for WriteAttributeCounterCount
	
	writeattributecountercount->set_default_properties(writeattributecountercount_prop);
	//	Not Polled
	writeattributecountercount->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(writeattributecountercount);

	//	Attribute : ScalarReadsCount
	ScalarReadsCountAttrib	*scalarreadscount = new ScalarReadsCountAttrib();
	Tango::UserDefaultAttrProp	scalarreadscount_prop;
	scalarreadscount_prop.set_description("scalar reads count");
	//	label	not set for ScalarReadsCount
	//	unit	not set for ScalarReadsCount
	//	standard_unit	not set for ScalarReadsCount
	//	display_unit	not set for ScalarReadsCount
	//	format	not set for ScalarReadsCount
	//	max_value	not set for ScalarReadsCount
	//	min_value	not set for ScalarReadsCount
	//	max_alarm	not set for ScalarReadsCount
	//	min_alarm	not set for ScalarReadsCount
	//	max_warning	not set for ScalarReadsCount
	//	min_warning	not set for ScalarReadsCount
	//	delta_t	not set for ScalarReadsCount
	//	delta_val	not set for ScalarReadsCount
	
	scalarreadscount->set_default_properties(scalarreadscount_prop);
	//	Not Polled
	scalarreadscount->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(scalarreadscount);

	//	Attribute : SpectrumReadsCount
	SpectrumReadsCountAttrib	*spectrumreadscount = new SpectrumReadsCountAttrib();
	Tango::UserDefaultAttrProp	spectrumreadscount_prop;
	spectrumreadscount_prop.set_description("spectrum reads count");
	//	label	not set for SpectrumReadsCount
	//	unit	not set for SpectrumReadsCount
	//	standard_unit	not set for SpectrumReadsCount
	//	display_unit	not set for SpectrumReadsCount
	//	format	not set for SpectrumReadsCount
	//	max_value	not set for SpectrumReadsCount
	//	min_value	not set for SpectrumReadsCount
	//	max_alarm	not set for SpectrumReadsCount
	//	min_alarm	not set for SpectrumReadsCount
	//	max_warning	not set for SpectrumReadsCount
	//	min_warning	not set for SpectrumReadsCount
	//	delta_t	not set for SpectrumReadsCount
	//	delta_val	not set for SpectrumReadsCount
	
	spectrumreadscount->set_default_properties(spectrumreadscount_prop);
	//	Not Polled
	spectrumreadscount->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(spectrumreadscount);

	//	Attribute : ImageReadsCount
	ImageReadsCountAttrib	*imagereadscount = new ImageReadsCountAttrib();
	Tango::UserDefaultAttrProp	imagereadscount_prop;
	imagereadscount_prop.set_description("image reads count");
	//	label	not set for ImageReadsCount
	//	unit	not set for ImageReadsCount
	//	standard_unit	not set for ImageReadsCount
	//	display_unit	not set for ImageReadsCount
	//	format	not set for ImageReadsCount
	//	max_value	not set for ImageReadsCount
	//	min_value	not set for ImageReadsCount
	//	max_alarm	not set for ImageReadsCount
	//	min_alarm	not set for ImageReadsCount
	//	max_warning	not set for ImageReadsCount
	//	min_warning	not set for ImageReadsCount
	//	delta_t	not set for ImageReadsCount
	//	delta_val	not set for ImageReadsCount
	
	imagereadscount->set_default_properties(imagereadscount_prop);
	//	Not Polled
	imagereadscount->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(imagereadscount);

	//	Attribute : ScalarWritesCount
	ScalarWritesCountAttrib	*scalarwritescount = new ScalarWritesCountAttrib();
	Tango::UserDefaultAttrProp	scalarwritescount_prop;
	scalarwritescount_prop.set_description("scalar writes count");
	//	label	not set for ScalarWritesCount
	//	unit	not set for ScalarWritesCount
	//	standard_unit	not set for ScalarWritesCount
	//	display_unit	not set for ScalarWritesCount
	//	format	not set for ScalarWritesCount
	//	max_value	not set for ScalarWritesCount
	//	min_value	not set for ScalarWritesCount
	//	max_alarm	not set for ScalarWritesCount
	//	min_alarm	not set for ScalarWritesCount
	//	max_warning	not set for ScalarWritesCount
	//	min_warning	not set for ScalarWritesCount
	//	delta_t	not set for ScalarWritesCount
	//	delta_val	not set for ScalarWritesCount
	
	scalarwritescount->set_default_properties(scalarwritescount_prop);
	//	Not Polled
	scalarwritescount->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(scalarwritescount);

	//	Attribute : SpectrumWritesCount
	SpectrumWritesCountAttrib	*spectrumwritescount = new SpectrumWritesCountAttrib();
	Tango::UserDefaultAttrProp	spectrumwritescount_prop;
	spectrumwritescount_prop.set_description("spectrum writes count");
	//	label	not set for SpectrumWritesCount
	//	unit	not set for SpectrumWritesCount
	//	standard_unit	not set for SpectrumWritesCount
	//	display_unit	not set for SpectrumWritesCount
	//	format	not set for SpectrumWritesCount
	//	max_value	not set for SpectrumWritesCount
	//	min_value	not set for SpectrumWritesCount
	//	max_alarm	not set for SpectrumWritesCount
	//	min_alarm	not set for SpectrumWritesCount
	//	max_warning	not set for SpectrumWritesCount
	//	min_warning	not set for SpectrumWritesCount
	//	delta_t	not set for SpectrumWritesCount
	//	delta_val	not set for SpectrumWritesCount
	
	spectrumwritescount->set_default_properties(spectrumwritescount_prop);
	//	Not Polled
	spectrumwritescount->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(spectrumwritescount);

	//	Attribute : ImageWritesCount
	ImageWritesCountAttrib	*imagewritescount = new ImageWritesCountAttrib();
	Tango::UserDefaultAttrProp	imagewritescount_prop;
	imagewritescount_prop.set_description("image writes count");
	//	label	not set for ImageWritesCount
	//	unit	not set for ImageWritesCount
	//	standard_unit	not set for ImageWritesCount
	//	display_unit	not set for ImageWritesCount
	//	format	not set for ImageWritesCount
	//	max_value	not set for ImageWritesCount
	//	min_value	not set for ImageWritesCount
	//	max_alarm	not set for ImageWritesCount
	//	min_alarm	not set for ImageWritesCount
	//	max_warning	not set for ImageWritesCount
	//	min_warning	not set for ImageWritesCount
	//	delta_t	not set for ImageWritesCount
	//	delta_val	not set for ImageWritesCount
	
	imagewritescount->set_default_properties(imagewritescount_prop);
	//	Not Polled
	imagewritescount->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(imagewritescount);

	//	Attribute : CommandCallsCount
	CommandCallsCountAttrib	*commandcallscount = new CommandCallsCountAttrib();
	Tango::UserDefaultAttrProp	commandcallscount_prop;
	commandcallscount_prop.set_description("command calls count");
	//	label	not set for CommandCallsCount
	//	unit	not set for CommandCallsCount
	//	standard_unit	not set for CommandCallsCount
	//	display_unit	not set for CommandCallsCount
	//	format	not set for CommandCallsCount
	//	max_value	not set for CommandCallsCount
	//	min_value	not set for CommandCallsCount
	//	max_alarm	not set for CommandCallsCount
	//	min_alarm	not set for CommandCallsCount
	//	max_warning	not set for CommandCallsCount
	//	min_warning	not set for CommandCallsCount
	//	delta_t	not set for CommandCallsCount
	//	delta_val	not set for CommandCallsCount
	
	commandcallscount->set_default_properties(commandcallscount_prop);
	//	Not Polled
	commandcallscount->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(commandcallscount);

	//	Attribute : TimeSinceReset
	TimeSinceResetAttrib	*timesincereset = new TimeSinceResetAttrib();
	Tango::UserDefaultAttrProp	timesincereset_prop;
	timesincereset_prop.set_description("time since reset");
	timesincereset_prop.set_label("time since reset");
	timesincereset_prop.set_unit("s");
	//	standard_unit	not set for TimeSinceReset
	//	display_unit	not set for TimeSinceReset
	//	format	not set for TimeSinceReset
	//	max_value	not set for TimeSinceReset
	//	min_value	not set for TimeSinceReset
	//	max_alarm	not set for TimeSinceReset
	//	min_alarm	not set for TimeSinceReset
	//	max_warning	not set for TimeSinceReset
	//	min_warning	not set for TimeSinceReset
	//	delta_t	not set for TimeSinceReset
	//	delta_val	not set for TimeSinceReset
	
	timesincereset->set_default_properties(timesincereset_prop);
	//	Not Polled
	timesincereset->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(timesincereset);

	//	Attribute : PipeReadsCount
	PipeReadsCountAttrib	*pipereadscount = new PipeReadsCountAttrib();
	Tango::UserDefaultAttrProp	pipereadscount_prop;
	pipereadscount_prop.set_description("pipe reads count");
	//	label	not set for PipeReadsCount
	//	unit	not set for PipeReadsCount
	//	standard_unit	not set for PipeReadsCount
	//	display_unit	not set for PipeReadsCount
	//	format	not set for PipeReadsCount
	//	max_value	not set for PipeReadsCount
	//	min_value	not set for PipeReadsCount
	//	max_alarm	not set for PipeReadsCount
	//	min_alarm	not set for PipeReadsCount
	//	max_warning	not set for PipeReadsCount
	//	min_warning	not set for PipeReadsCount
	//	delta_t	not set for PipeReadsCount
	//	delta_val	not set for PipeReadsCount
	
	pipereadscount->set_default_properties(pipereadscount_prop);
	//	Not Polled
	pipereadscount->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(pipereadscount);

	//	Attribute : PipeWritesCount
	PipeWritesCountAttrib	*pipewritescount = new PipeWritesCountAttrib();
	Tango::UserDefaultAttrProp	pipewritescount_prop;
	pipewritescount_prop.set_description("pipe writes count");
	//	label	not set for PipeWritesCount
	//	unit	not set for PipeWritesCount
	//	standard_unit	not set for PipeWritesCount
	//	display_unit	not set for PipeWritesCount
	//	format	not set for PipeWritesCount
	//	max_value	not set for PipeWritesCount
	//	min_value	not set for PipeWritesCount
	//	max_alarm	not set for PipeWritesCount
	//	min_alarm	not set for PipeWritesCount
	//	max_warning	not set for PipeWritesCount
	//	min_warning	not set for PipeWritesCount
	//	delta_t	not set for PipeWritesCount
	//	delta_val	not set for PipeWritesCount
	
	pipewritescount->set_default_properties(pipewritescount_prop);
	//	Not Polled
	pipewritescount->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(pipewritescount);

	//	Attribute : EventSleepPeriod
	EventSleepPeriodAttrib	*eventsleepperiod = new EventSleepPeriodAttrib();
	Tango::UserDefaultAttrProp	eventsleepperiod_prop;
	eventsleepperiod_prop.set_description("sleep period of the event thread in milliseconds");
	//	label	not set for EventSleepPeriod
	eventsleepperiod_prop.set_unit("ms");
	//	standard_unit	not set for EventSleepPeriod
	//	display_unit	not set for EventSleepPeriod
	//	format	not set for EventSleepPeriod
	//	max_value	not set for EventSleepPeriod
	//	min_value	not set for EventSleepPeriod
	//	max_alarm	not set for EventSleepPeriod
	//	min_alarm	not set for EventSleepPeriod
	//	max_warning	not set for EventSleepPeriod
	//	min_warning	not set for EventSleepPeriod
	//	delta_t	not set for EventSleepPeriod
	//	delta_val	not set for EventSleepPeriod
	
	eventsleepperiod->set_default_properties(eventsleepperiod_prop);
	//	Not Polled
	eventsleepperiod->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(eventsleepperiod);

	//	Attribute : ScalarEventsCount
	ScalarEventsCountAttrib	*scalareventscount = new ScalarEventsCountAttrib();
	Tango::UserDefaultAttrProp	scalareventscount_prop;
	scalareventscount_prop.set_description("scalar events count");
	//	label	not set for ScalarEventsCount
	//	unit	not set for ScalarEventsCount
	//	standard_unit	not set for ScalarEventsCount
	//	display_unit	not set for ScalarEventsCount
	//	format	not set for ScalarEventsCount
	//	max_value	not set for ScalarEventsCount
	//	min_value	not set for ScalarEventsCount
	//	max_alarm	not set for ScalarEventsCount
	//	min_alarm	not set for ScalarEventsCount
	//	max_warning	not set for ScalarEventsCount
	//	min_warning	not set for ScalarEventsCount
	//	delta_t	not set for ScalarEventsCount
	//	delta_val	not set for ScalarEventsCount
	
	scalareventscount->set_default_properties(scalareventscount_prop);
	//	Not Polled
	scalareventscount->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(scalareventscount);

	//	Attribute : BenchmarkSpectrumAttribute
	BenchmarkSpectrumAttributeAttrib	*benchmarkspectrumattribute = new BenchmarkSpectrumAttributeAttrib();
	Tango::UserDefaultAttrProp	benchmarkspectrumattribute_prop;
	benchmarkspectrumattribute_prop.set_description("benchmark spectrum attribute");
	//	label	not set for BenchmarkSpectrumAttribute
	//	unit	not set for BenchmarkSpectrumAttribute
	//	standard_unit	not set for BenchmarkSpectrumAttribute
	//	display_unit	not set for BenchmarkSpectrumAttribute
	//	format	not set for BenchmarkSpectrumAttribute
	//	max_value	not set for BenchmarkSpectrumAttribute
	//	min_value	not set for BenchmarkSpectrumAttribute
	//	max_alarm	not set for BenchmarkSpectrumAttribute
	//	min_alarm	not set for BenchmarkSpectrumAttribute
	//	max_warning	not set for BenchmarkSpectrumAttribute
	//	min_warning	not set for BenchmarkSpectrumAttribute
	//	delta_t	not set for BenchmarkSpectrumAttribute
	//	delta_val	not set for BenchmarkSpectrumAttribute
	
	benchmarkspectrumattribute->set_default_properties(benchmarkspectrumattribute_prop);
	//	Not Polled
	benchmarkspectrumattribute->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	benchmarkspectrumattribute->set_change_event(true, false);
	att_list.push_back(benchmarkspectrumattribute);

	//	Attribute : BenchmarkImageAttribute
	BenchmarkImageAttributeAttrib	*benchmarkimageattribute = new BenchmarkImageAttributeAttrib();
	Tango::UserDefaultAttrProp	benchmarkimageattribute_prop;
	benchmarkimageattribute_prop.set_description("benchmark image attribute");
	//	label	not set for BenchmarkImageAttribute
	//	unit	not set for BenchmarkImageAttribute
	//	standard_unit	not set for BenchmarkImageAttribute
	//	display_unit	not set for BenchmarkImageAttribute
	//	format	not set for BenchmarkImageAttribute
	//	max_value	not set for BenchmarkImageAttribute
	//	min_value	not set for BenchmarkImageAttribute
	//	max_alarm	not set for BenchmarkImageAttribute
	//	min_alarm	not set for BenchmarkImageAttribute
	//	max_warning	not set for BenchmarkImageAttribute
	//	min_warning	not set for BenchmarkImageAttribute
	//	delta_t	not set for BenchmarkImageAttribute
	//	delta_val	not set for BenchmarkImageAttribute
	
	benchmarkimageattribute->set_default_properties(benchmarkimageattribute_prop);
	//	Not Polled
	benchmarkimageattribute->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	benchmarkimageattribute->set_change_event(true, false);
	att_list.push_back(benchmarkimageattribute);


	//	Create a list of static attributes
	create_static_attribute_list(get_class_attr()->get_attr_list());
	/*----- PROTECTED REGION ID(CppBenchmarkTargetClass::attribute_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	CppBenchmarkTargetClass::attribute_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : CppBenchmarkTargetClass::pipe_factory()
 *	Description : Create the pipe object(s)
 *                and store them in the pipe list
 */
//--------------------------------------------------------
void CppBenchmarkTargetClass::pipe_factory()
{
	/*----- PROTECTED REGION ID(CppBenchmarkTargetClass::pipe_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	CppBenchmarkTargetClass::pipe_factory_before
	Tango::UserDefaultPipeProp udpp;
	BenchmarkPipeClass	*pBenchmarkPipe = new BenchmarkPipeClass("BenchmarkPipe",Tango::OPERATOR);
	udpp.set_description("benchmark pipe");
	udpp.set_label("");
	pBenchmarkPipe->set_default_properties(udpp);
	pipe_list.push_back(pBenchmarkPipe);

	/*----- PROTECTED REGION ID(CppBenchmarkTargetClass::pipe_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	CppBenchmarkTargetClass::pipe_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : CppBenchmarkTargetClass::command_factory()
 *	Description : Create the command object(s)
 *                and store them in the command list
 */
//--------------------------------------------------------
void CppBenchmarkTargetClass::command_factory()
{
	/*----- PROTECTED REGION ID(CppBenchmarkTargetClass::command_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	CppBenchmarkTargetClass::command_factory_before


	//	Command BenchmarkCommand
	BenchmarkCommandClass	*pBenchmarkCommandCmd =
		new BenchmarkCommandClass("BenchmarkCommand",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pBenchmarkCommandCmd);

	//	Command SetSpectrumSize
	SetSpectrumSizeClass	*pSetSpectrumSizeCmd =
		new SetSpectrumSizeClass("SetSpectrumSize",
			Tango::DEV_LONG, Tango::DEV_VOID,
			"spectrum size",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetSpectrumSizeCmd);

	//	Command SetImageSize
	SetImageSizeClass	*pSetImageSizeCmd =
		new SetImageSizeClass("SetImageSize",
			Tango::DEVVAR_LONGARRAY, Tango::DEV_VOID,
			"image size",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetImageSizeCmd);

	//	Command ResetCounters
	ResetCountersClass	*pResetCountersCmd =
		new ResetCountersClass("ResetCounters",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pResetCountersCmd);

	//	Command StartScalarEvents
	StartScalarEventsClass	*pStartScalarEventsCmd =
		new StartScalarEventsClass("StartScalarEvents",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pStartScalarEventsCmd);

	//	Command StopScalarEvents
	StopScalarEventsClass	*pStopScalarEventsCmd =
		new StopScalarEventsClass("StopScalarEvents",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pStopScalarEventsCmd);

	//	Command PushScalarEvent
	PushScalarEventClass	*pPushScalarEventCmd =
		new PushScalarEventClass("PushScalarEvent",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pPushScalarEventCmd);

	/*----- PROTECTED REGION ID(CppBenchmarkTargetClass::command_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	CppBenchmarkTargetClass::command_factory_after
}

//===================================================================
//	Dynamic attributes related methods
//===================================================================

//--------------------------------------------------------
/**
 * method : 		CppBenchmarkTargetClass::create_static_attribute_list
 * description : 	Create the a list of static attributes
 *
 * @param	att_list	the ceated attribute list
 */
//--------------------------------------------------------
void CppBenchmarkTargetClass::create_static_attribute_list(vector<Tango::Attr *> &att_list)
{
	for (unsigned long i=0 ; i<att_list.size() ; i++)
	{
		string att_name(att_list[i]->get_name());
		transform(att_name.begin(), att_name.end(), att_name.begin(), ::tolower);
		defaultAttList.push_back(att_name);
	}

	cout2 << defaultAttList.size() << " attributes in default list" << endl;

	/*----- PROTECTED REGION ID(CppBenchmarkTargetClass::create_static_att_list) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	CppBenchmarkTargetClass::create_static_att_list
}


//--------------------------------------------------------
/**
 * method : 		CppBenchmarkTargetClass::erase_dynamic_attributes
 * description : 	delete the dynamic attributes if any.
 *
 * @param	devlist_ptr	the device list pointer
 * @param	list of all attributes
 */
//--------------------------------------------------------
void CppBenchmarkTargetClass::erase_dynamic_attributes(const Tango::DevVarStringArray *devlist_ptr, vector<Tango::Attr *> &att_list)
{
	Tango::Util *tg = Tango::Util::instance();

	for (unsigned long i=0 ; i<devlist_ptr->length() ; i++)
	{
		Tango::DeviceImpl *dev_impl = tg->get_device_by_name(((string)(*devlist_ptr)[i]).c_str());
		CppBenchmarkTarget *dev = static_cast<CppBenchmarkTarget *> (dev_impl);

		vector<Tango::Attribute *> &dev_att_list = dev->get_device_attr()->get_attribute_list();
		vector<Tango::Attribute *>::iterator ite_att;
		for (ite_att=dev_att_list.begin() ; ite_att != dev_att_list.end() ; ++ite_att)
		{
			string att_name((*ite_att)->get_name_lower());
			if ((att_name == "state") || (att_name == "status"))
				continue;
			vector<string>::iterator ite_str = find(defaultAttList.begin(), defaultAttList.end(), att_name);
			if (ite_str == defaultAttList.end())
			{
				cout2 << att_name << " is a UNWANTED dynamic attribute for device " << (*devlist_ptr)[i] << endl;
				Tango::Attribute &att = dev->get_device_attr()->get_attr_by_name(att_name.c_str());
				dev->remove_attribute(att_list[att.get_attr_idx()], true, false);
				--ite_att;
			}
		}
	}
	/*----- PROTECTED REGION ID(CppBenchmarkTargetClass::erase_dynamic_attributes) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	CppBenchmarkTargetClass::erase_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Method      : CppBenchmarkTargetClass::get_attr_by_name()
 *	Description : returns Tango::Attr * object found by name
 */
//--------------------------------------------------------
Tango::Attr *CppBenchmarkTargetClass::get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname)
{
	vector<Tango::Attr *>::iterator it;
	for (it=att_list.begin() ; it<att_list.end() ; ++it)
		if ((*it)->get_name()==attname)
			return (*it);
	//	Attr does not exist
	return NULL;
}


/*----- PROTECTED REGION ID(CppBenchmarkTargetClass::Additional Methods) ENABLED START -----*/

/*----- PROTECTED REGION END -----*/	//	CppBenchmarkTargetClass::Additional Methods
} //	namespace
