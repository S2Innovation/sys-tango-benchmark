/*----- PROTECTED REGION ID(CppBenchmarkTarget.cpp) ENABLED START -----*/
//=============================================================================
//
// file :        CppBenchmarkTarget.cpp
//
// description : C++ source for the CppBenchmarkTarget class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               CppBenchmarkTarget are implemented in this file.
//
// project :     Benchmark device
//
// This file is part of Tango device class.
//
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
//
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <CppBenchmarkTarget.h>
#include <CppBenchmarkTargetClass.h>
#include <sys/time.h>
#include "EventThread.h"


/*----- PROTECTED REGION END -----*/	//	CppBenchmarkTarget.cpp

/**
 *  CppBenchmarkTarget class description:
 *    Benchmark device for counting attribute, command and pipe calls
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name             |  Method name
//================================================================
//  State                    |  dev_state
//  Status                   |  dev_status
//  BenchmarkCommand         |  benchmark_command
//  SetSpectrumSize          |  set_spectrum_size
//  SetImageSize             |  set_image_size
//  ResetCounters            |  reset_counters
//  StartEvents              |  start_events
//  StopEvents               |  stop_events
//  PushEvent                |  push_event
//  CreateDynamicAttributes  |  create_dynamic_attributes
//================================================================

//================================================================
//  Attributes managed are:
//================================================================
//  BenchmarkScalarAttribute    |  Tango::DevDouble	Scalar
//  AlwaysExecutedHookCount     |  Tango::DevLong	Scalar
//  ReadAttributeHardwareCount  |  Tango::DevLong	Scalar
//  WriteAttributeCounterCount  |  Tango::DevLong	Scalar
//  ScalarReadsCount            |  Tango::DevLong	Scalar
//  SpectrumReadsCount          |  Tango::DevLong	Scalar
//  ImageReadsCount             |  Tango::DevLong	Scalar
//  ScalarWritesCount           |  Tango::DevLong	Scalar
//  SpectrumWritesCount         |  Tango::DevLong	Scalar
//  ImageWritesCount            |  Tango::DevLong	Scalar
//  CommandCallsCount           |  Tango::DevLong	Scalar
//  TimeSinceReset              |  Tango::DevDouble	Scalar
//  PipeReadsCount              |  Tango::DevLong	Scalar
//  PipeWritesCount             |  Tango::DevLong	Scalar
//  EventSleepPeriod            |  Tango::DevDouble	Scalar
//  EventsCount                 |  Tango::DevLong	Scalar
//  EventAttribute              |  Tango::DevString	Scalar
//  BenchmarkSpectrumAttribute  |  Tango::DevDouble	Spectrum  ( max = 4096)
//  BenchmarkImageAttribute     |  Tango::DevDouble	Image  ( max = 4096 x 4096)
//================================================================

namespace CppBenchmarkTarget_ns
{
/*----- PROTECTED REGION ID(CppBenchmarkTarget::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	CppBenchmarkTarget::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : CppBenchmarkTarget::CppBenchmarkTarget()
 *	Description : Constructors for a Tango device
 *                implementing the classCppBenchmarkTarget
 */
//--------------------------------------------------------
CppBenchmarkTarget::CppBenchmarkTarget(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(CppBenchmarkTarget::constructor_1) ENABLED START -----*/
	init_device();

	/*----- PROTECTED REGION END -----*/	//	CppBenchmarkTarget::constructor_1
}
//--------------------------------------------------------
CppBenchmarkTarget::CppBenchmarkTarget(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(CppBenchmarkTarget::constructor_2) ENABLED START -----*/
	init_device();

	/*----- PROTECTED REGION END -----*/	//	CppBenchmarkTarget::constructor_2
}
//--------------------------------------------------------
CppBenchmarkTarget::CppBenchmarkTarget(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(CppBenchmarkTarget::constructor_3) ENABLED START -----*/
	init_device();

	/*----- PROTECTED REGION END -----*/	//	CppBenchmarkTarget::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : CppBenchmarkTarget::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void CppBenchmarkTarget::delete_device()
{
	DEBUG_STREAM << "CppBenchmarkTarget::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(CppBenchmarkTarget::delete_device) ENABLED START -----*/

	//	Delete device allocated objects
	int* nret;
	if(event_thread){
	  event_thread->join((void**)&nret);
	  delete(event_thread);
	  event_thread = NULL;
	}

	/*----- PROTECTED REGION END -----*/	//	CppBenchmarkTarget::delete_device
	delete[] attr_BenchmarkScalarAttribute_read;
	delete[] attr_AlwaysExecutedHookCount_read;
	delete[] attr_ReadAttributeHardwareCount_read;
	delete[] attr_WriteAttributeCounterCount_read;
	delete[] attr_ScalarReadsCount_read;
	delete[] attr_SpectrumReadsCount_read;
	delete[] attr_ImageReadsCount_read;
	delete[] attr_ScalarWritesCount_read;
	delete[] attr_SpectrumWritesCount_read;
	delete[] attr_ImageWritesCount_read;
	delete[] attr_CommandCallsCount_read;
	delete[] attr_TimeSinceReset_read;
	delete[] attr_PipeReadsCount_read;
	delete[] attr_PipeWritesCount_read;
	delete[] attr_EventSleepPeriod_read;
	delete[] attr_EventsCount_read;
	delete[] attr_EventAttribute_read;
	delete[] attr_BenchmarkSpectrumAttribute_read;
	delete[] attr_BenchmarkImageAttribute_read;
}

//--------------------------------------------------------
/**
 *	Method      : CppBenchmarkTarget::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void CppBenchmarkTarget::init_device()
{
	DEBUG_STREAM << "CppBenchmarkTarget::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(CppBenchmarkTarget::init_device_before) ENABLED START -----*/

	//	Initialization before get_device_property() call

	/*----- PROTECTED REGION END -----*/	//	CppBenchmarkTarget::init_device_before
	
	//	No device property to be read from database
	
	attr_BenchmarkScalarAttribute_read = new Tango::DevDouble[1];
	attr_AlwaysExecutedHookCount_read = new Tango::DevLong[1];
	attr_ReadAttributeHardwareCount_read = new Tango::DevLong[1];
	attr_WriteAttributeCounterCount_read = new Tango::DevLong[1];
	attr_ScalarReadsCount_read = new Tango::DevLong[1];
	attr_SpectrumReadsCount_read = new Tango::DevLong[1];
	attr_ImageReadsCount_read = new Tango::DevLong[1];
	attr_ScalarWritesCount_read = new Tango::DevLong[1];
	attr_SpectrumWritesCount_read = new Tango::DevLong[1];
	attr_ImageWritesCount_read = new Tango::DevLong[1];
	attr_CommandCallsCount_read = new Tango::DevLong[1];
	attr_TimeSinceReset_read = new Tango::DevDouble[1];
	attr_PipeReadsCount_read = new Tango::DevLong[1];
	attr_PipeWritesCount_read = new Tango::DevLong[1];
	attr_EventSleepPeriod_read = new Tango::DevDouble[1];
	attr_EventsCount_read = new Tango::DevLong[1];
	attr_EventAttribute_read = new Tango::DevString[1];
	attr_BenchmarkSpectrumAttribute_read = new Tango::DevDouble[4096];
	attr_BenchmarkImageAttribute_read = new Tango::DevDouble[4096*4096];
	/*----- PROTECTED REGION ID(CppBenchmarkTarget::init_device) ENABLED START -----*/

	//	Initialize device
	always_executed_hook_count = 0;
	read_attribute_hardware_count = 0;
	write_attribute_counter_count = 0;

	scalar_reads_count = 0;
	spectrum_reads_count = 0;
	image_reads_count = 0;
	pipe_reads_count = 0;

	scalar_writes_count = 0;
	spectrum_writes_count = 0;
	image_writes_count = 0;
	pipe_writes_count = 0;

	command_calls_count = 0;
	scalar_events_count = 0;

	*attr_EventSleepPeriod_read =10.0;
	*attr_EventAttribute_read = Tango::string_dup(event_attributes[0].c_str());

	gettimeofday(&reset_time, NULL);
	//   self.__benchmark_pipe = (
        //     'PipeBlob',
        //     (
        //         {'name': 'DevLong64', 'value': 123, },
        //         {'name': 'DevULong', 'value': np.uint32(123)},
        //         {'name': 'DevVarUShortArray',
        //          'value': range(5), 'dtype': ('uint16',)},
        //         {'name': 'DevVarDoubleArray',
        //          'value': [1.11, 2.22], 'dtype': ('float64',)},
        //         {'name': 'DevBoolean', 'value': True},
        //     )
        // )


	/*----- PROTECTED REGION END -----*/	//	CppBenchmarkTarget::init_device
}


//--------------------------------------------------------
/**
 *	Method      : CppBenchmarkTarget::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void CppBenchmarkTarget::always_executed_hook()
{
	DEBUG_STREAM << "CppBenchmarkTarget::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(CppBenchmarkTarget::always_executed_hook) ENABLED START -----*/

	//	code always executed before all requests
	always_executed_hook_count++;

	/*----- PROTECTED REGION END -----*/	//	CppBenchmarkTarget::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : CppBenchmarkTarget::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void CppBenchmarkTarget::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "CppBenchmarkTarget::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(CppBenchmarkTarget::read_attr_hardware) ENABLED START -----*/

	//	Add your own cod
	read_attribute_hardware_count++;
	/*----- PROTECTED REGION END -----*/	//	CppBenchmarkTarget::read_attr_hardware
}
//--------------------------------------------------------
/**
 *	Method      : CppBenchmarkTarget::write_attr_hardware()
 *	Description : Hardware writing for attributes
 */
//--------------------------------------------------------
void CppBenchmarkTarget::write_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "CppBenchmarkTarget::write_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(CppBenchmarkTarget::write_attr_hardware) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	CppBenchmarkTarget::write_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute BenchmarkScalarAttribute related method
 *	Description: benchmark scalar attribute
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void CppBenchmarkTarget::read_BenchmarkScalarAttribute(Tango::Attribute &attr)
{
	DEBUG_STREAM << "CppBenchmarkTarget::read_BenchmarkScalarAttribute(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(CppBenchmarkTarget::read_BenchmarkScalarAttribute) ENABLED START -----*/
	//	Set the attribute value
	scalar_reads_count++;
	attr.set_value(attr_BenchmarkScalarAttribute_read);

	/*----- PROTECTED REGION END -----*/	//	CppBenchmarkTarget::read_BenchmarkScalarAttribute
}
//--------------------------------------------------------
/**
 *	Write attribute BenchmarkScalarAttribute related method
 *	Description: benchmark scalar attribute
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void CppBenchmarkTarget::write_BenchmarkScalarAttribute(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "CppBenchmarkTarget::write_BenchmarkScalarAttribute(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(CppBenchmarkTarget::write_BenchmarkScalarAttribute) ENABLED START -----*/
	scalar_writes_count++;
	*attr_BenchmarkScalarAttribute_read = w_val;

	/*----- PROTECTED REGION END -----*/	//	CppBenchmarkTarget::write_BenchmarkScalarAttribute
}
//--------------------------------------------------------
/**
 *	Read attribute AlwaysExecutedHookCount related method
 *	Description: always executed hook count
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void CppBenchmarkTarget::read_AlwaysExecutedHookCount(Tango::Attribute &attr)
{
	DEBUG_STREAM << "CppBenchmarkTarget::read_AlwaysExecutedHookCount(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(CppBenchmarkTarget::read_AlwaysExecutedHookCount) ENABLED START -----*/
	//	Set the attribute value
	*attr_AlwaysExecutedHookCount_read = always_executed_hook_count;
	attr.set_value(attr_AlwaysExecutedHookCount_read);

	/*----- PROTECTED REGION END -----*/	//	CppBenchmarkTarget::read_AlwaysExecutedHookCount
}
//--------------------------------------------------------
/**
 *	Read attribute ReadAttributeHardwareCount related method
 *	Description: read attribute hardware count
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void CppBenchmarkTarget::read_ReadAttributeHardwareCount(Tango::Attribute &attr)
{
	DEBUG_STREAM << "CppBenchmarkTarget::read_ReadAttributeHardwareCount(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(CppBenchmarkTarget::read_ReadAttributeHardwareCount) ENABLED START -----*/
	//	Set the attribute value
	*attr_ReadAttributeHardwareCount_read = read_attribute_hardware_count;
	attr.set_value(attr_ReadAttributeHardwareCount_read);

	/*----- PROTECTED REGION END -----*/	//	CppBenchmarkTarget::read_ReadAttributeHardwareCount
}
//--------------------------------------------------------
/**
 *	Read attribute WriteAttributeCounterCount related method
 *	Description: write attribute counter count
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void CppBenchmarkTarget::read_WriteAttributeCounterCount(Tango::Attribute &attr)
{
	DEBUG_STREAM << "CppBenchmarkTarget::read_WriteAttributeCounterCount(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(CppBenchmarkTarget::read_WriteAttributeCounterCount) ENABLED START -----*/
	//	Set the attribute value
	*attr_WriteAttributeCounterCount_read =
	  (scalar_writes_count +
	   spectrum_writes_count +
	   image_writes_count);
	attr.set_value(attr_WriteAttributeCounterCount_read);

	/*----- PROTECTED REGION END -----*/	//	CppBenchmarkTarget::read_WriteAttributeCounterCount
}
//--------------------------------------------------------
/**
 *	Read attribute ScalarReadsCount related method
 *	Description: scalar reads count
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void CppBenchmarkTarget::read_ScalarReadsCount(Tango::Attribute &attr)
{
	DEBUG_STREAM << "CppBenchmarkTarget::read_ScalarReadsCount(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(CppBenchmarkTarget::read_ScalarReadsCount) ENABLED START -----*/
	//	Set the attribute value
	*attr_ScalarReadsCount_read = scalar_reads_count;
	attr.set_value(attr_ScalarReadsCount_read);

	/*----- PROTECTED REGION END -----*/	//	CppBenchmarkTarget::read_ScalarReadsCount
}
//--------------------------------------------------------
/**
 *	Read attribute SpectrumReadsCount related method
 *	Description: spectrum reads count
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void CppBenchmarkTarget::read_SpectrumReadsCount(Tango::Attribute &attr)
{
	DEBUG_STREAM << "CppBenchmarkTarget::read_SpectrumReadsCount(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(CppBenchmarkTarget::read_SpectrumReadsCount) ENABLED START -----*/
	//	Set the attribute value
	*attr_SpectrumReadsCount_read = spectrum_reads_count;
	attr.set_value(attr_SpectrumReadsCount_read);

	/*----- PROTECTED REGION END -----*/	//	CppBenchmarkTarget::read_SpectrumReadsCount
}
//--------------------------------------------------------
/**
 *	Read attribute ImageReadsCount related method
 *	Description: image reads count
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void CppBenchmarkTarget::read_ImageReadsCount(Tango::Attribute &attr)
{
	DEBUG_STREAM << "CppBenchmarkTarget::read_ImageReadsCount(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(CppBenchmarkTarget::read_ImageReadsCount) ENABLED START -----*/
	//	Set the attribute value
	*attr_ImageReadsCount_read = image_reads_count;
	attr.set_value(attr_ImageReadsCount_read);

	/*----- PROTECTED REGION END -----*/	//	CppBenchmarkTarget::read_ImageReadsCount
}
//--------------------------------------------------------
/**
 *	Read attribute ScalarWritesCount related method
 *	Description: scalar writes count
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void CppBenchmarkTarget::read_ScalarWritesCount(Tango::Attribute &attr)
{
	DEBUG_STREAM << "CppBenchmarkTarget::read_ScalarWritesCount(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(CppBenchmarkTarget::read_ScalarWritesCount) ENABLED START -----*/
	//	Set the attribute value
	*attr_ScalarWritesCount_read = scalar_writes_count;
	attr.set_value(attr_ScalarWritesCount_read);

	/*----- PROTECTED REGION END -----*/	//	CppBenchmarkTarget::read_ScalarWritesCount
}
//--------------------------------------------------------
/**
 *	Read attribute SpectrumWritesCount related method
 *	Description: spectrum writes count
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void CppBenchmarkTarget::read_SpectrumWritesCount(Tango::Attribute &attr)
{
	DEBUG_STREAM << "CppBenchmarkTarget::read_SpectrumWritesCount(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(CppBenchmarkTarget::read_SpectrumWritesCount) ENABLED START -----*/
	//	Set the attribute value
	*attr_SpectrumWritesCount_read = spectrum_writes_count;
	attr.set_value(attr_SpectrumWritesCount_read);

	/*----- PROTECTED REGION END -----*/	//	CppBenchmarkTarget::read_SpectrumWritesCount
}
//--------------------------------------------------------
/**
 *	Read attribute ImageWritesCount related method
 *	Description: image writes count
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void CppBenchmarkTarget::read_ImageWritesCount(Tango::Attribute &attr)
{
	DEBUG_STREAM << "CppBenchmarkTarget::read_ImageWritesCount(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(CppBenchmarkTarget::read_ImageWritesCount) ENABLED START -----*/
	//	Set the attribute value
	*attr_ImageWritesCount_read = image_writes_count;
	attr.set_value(attr_ImageWritesCount_read);

	/*----- PROTECTED REGION END -----*/	//	CppBenchmarkTarget::read_ImageWritesCount
}
//--------------------------------------------------------
/**
 *	Read attribute CommandCallsCount related method
 *	Description: command calls count
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void CppBenchmarkTarget::read_CommandCallsCount(Tango::Attribute &attr)
{
	DEBUG_STREAM << "CppBenchmarkTarget::read_CommandCallsCount(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(CppBenchmarkTarget::read_CommandCallsCount) ENABLED START -----*/
	//	Set the attribute value
	*attr_CommandCallsCount_read = command_calls_count;
	attr.set_value(attr_CommandCallsCount_read);

	/*----- PROTECTED REGION END -----*/	//	CppBenchmarkTarget::read_CommandCallsCount
}
//--------------------------------------------------------
/**
 *	Read attribute TimeSinceReset related method
 *	Description: time since reset
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void CppBenchmarkTarget::read_TimeSinceReset(Tango::Attribute &attr)
{
	DEBUG_STREAM << "CppBenchmarkTarget::read_TimeSinceReset(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(CppBenchmarkTarget::read_TimeSinceReset) ENABLED START -----*/
	//	Set the attribute value

	struct timeval time;
	gettimeofday(&time, NULL);
	double dtime = (double)(time.tv_sec - reset_time.tv_sec)
	  + (double)(time.tv_usec - reset_time.tv_usec)*0.000001;
	*attr_TimeSinceReset_read = dtime;
	attr.set_value(attr_TimeSinceReset_read);

	/*----- PROTECTED REGION END -----*/	//	CppBenchmarkTarget::read_TimeSinceReset
}
//--------------------------------------------------------
/**
 *	Read attribute PipeReadsCount related method
 *	Description: pipe reads count
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void CppBenchmarkTarget::read_PipeReadsCount(Tango::Attribute &attr)
{
	DEBUG_STREAM << "CppBenchmarkTarget::read_PipeReadsCount(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(CppBenchmarkTarget::read_PipeReadsCount) ENABLED START -----*/
	//	Set the attribute value
	*attr_PipeReadsCount_read = pipe_reads_count;
	attr.set_value(attr_PipeReadsCount_read);

	/*----- PROTECTED REGION END -----*/	//	CppBenchmarkTarget::read_PipeReadsCount
}
//--------------------------------------------------------
/**
 *	Read attribute PipeWritesCount related method
 *	Description: pipe writes count
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void CppBenchmarkTarget::read_PipeWritesCount(Tango::Attribute &attr)
{
	DEBUG_STREAM << "CppBenchmarkTarget::read_PipeWritesCount(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(CppBenchmarkTarget::read_PipeWritesCount) ENABLED START -----*/
	//	Set the attribute value
	*attr_PipeWritesCount_read = pipe_writes_count;
	attr.set_value(attr_PipeWritesCount_read);

	/*----- PROTECTED REGION END -----*/	//	CppBenchmarkTarget::read_PipeWritesCount
}
//--------------------------------------------------------
/**
 *	Read attribute EventSleepPeriod related method
 *	Description: sleep period of the event thread in milliseconds
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void CppBenchmarkTarget::read_EventSleepPeriod(Tango::Attribute &attr)
{
	DEBUG_STREAM << "CppBenchmarkTarget::read_EventSleepPeriod(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(CppBenchmarkTarget::read_EventSleepPeriod) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_EventSleepPeriod_read);

	/*----- PROTECTED REGION END -----*/	//	CppBenchmarkTarget::read_EventSleepPeriod
}
//--------------------------------------------------------
/**
 *	Write attribute EventSleepPeriod related method
 *	Description: sleep period of the event thread in milliseconds
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void CppBenchmarkTarget::write_EventSleepPeriod(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "CppBenchmarkTarget::write_EventSleepPeriod(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(CppBenchmarkTarget::write_EventSleepPeriod) ENABLED START -----*/
	*attr_EventSleepPeriod_read = w_val;


	/*----- PROTECTED REGION END -----*/	//	CppBenchmarkTarget::write_EventSleepPeriod
}
//--------------------------------------------------------
/**
 *	Read attribute EventsCount related method
 *	Description: events count
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void CppBenchmarkTarget::read_EventsCount(Tango::Attribute &attr)
{
	DEBUG_STREAM << "CppBenchmarkTarget::read_EventsCount(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(CppBenchmarkTarget::read_EventsCount) ENABLED START -----*/
	//	Set the attribute value
	*attr_EventsCount_read = scalar_events_count;
	attr.set_value(attr_EventsCount_read);

	/*----- PROTECTED REGION END -----*/	//	CppBenchmarkTarget::read_EventsCount
}
//--------------------------------------------------------
/**
 *	Read attribute EventAttribute related method
 *	Description: Attribute passed in events
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void CppBenchmarkTarget::read_EventAttribute(Tango::Attribute &attr)
{
	DEBUG_STREAM << "CppBenchmarkTarget::read_EventAttribute(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(CppBenchmarkTarget::read_EventAttribute) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_EventAttribute_read);
	
	/*----- PROTECTED REGION END -----*/	//	CppBenchmarkTarget::read_EventAttribute
}
//--------------------------------------------------------
/**
 *	Write attribute EventAttribute related method
 *	Description: Attribute passed in events
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void CppBenchmarkTarget::write_EventAttribute(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "CppBenchmarkTarget::write_EventAttribute(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevString	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(CppBenchmarkTarget::write_EventAttribute) ENABLED START -----*/
	if (std::find(std::begin(event_attributes),
		      std::end(event_attributes), std::string(w_val)) != std::end(event_attributes)){
	  *attr_EventAttribute_read = w_val;
	}
	else{
	  *attr_EventAttribute_read = Tango::string_dup(event_attributes[0].c_str());
	}

	/*----- PROTECTED REGION END -----*/	//	CppBenchmarkTarget::write_EventAttribute
}
//--------------------------------------------------------
/**
 *	Read attribute BenchmarkSpectrumAttribute related method
 *	Description: benchmark spectrum attribute
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 4096
 */
//--------------------------------------------------------
void CppBenchmarkTarget::read_BenchmarkSpectrumAttribute(Tango::Attribute &attr)
{
	DEBUG_STREAM << "CppBenchmarkTarget::read_BenchmarkSpectrumAttribute(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(CppBenchmarkTarget::read_BenchmarkSpectrumAttribute) ENABLED START -----*/
	//	Set the attribute value
	spectrum_reads_count++;
	attr.set_value(attr_BenchmarkSpectrumAttribute_read,
		       attr_BenchmarkSpectrumAttribute_length);

	/*----- PROTECTED REGION END -----*/	//	CppBenchmarkTarget::read_BenchmarkSpectrumAttribute
}
//--------------------------------------------------------
/**
 *	Write attribute BenchmarkSpectrumAttribute related method
 *	Description: benchmark spectrum attribute
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 4096
 */
//--------------------------------------------------------
void CppBenchmarkTarget::write_BenchmarkSpectrumAttribute(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "CppBenchmarkTarget::write_BenchmarkSpectrumAttribute(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve number of write values
	int	w_length = attr.get_write_value_length();

	//	Retrieve pointer on write values (Do not delete !)
	const Tango::DevDouble	*w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(CppBenchmarkTarget::write_BenchmarkSpectrumAttribute) ENABLED START -----*/
	spectrum_writes_count++;
	attr_BenchmarkSpectrumAttribute_length = w_length;
	for(int i = 0; i < w_length; i++)
	  attr_BenchmarkSpectrumAttribute_read[i] = w_val[i];

	/*----- PROTECTED REGION END -----*/	//	CppBenchmarkTarget::write_BenchmarkSpectrumAttribute
}
//--------------------------------------------------------
/**
 *	Read attribute BenchmarkImageAttribute related method
 *	Description: benchmark image attribute
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Image max = 4096 x 4096
 */
//--------------------------------------------------------
void CppBenchmarkTarget::read_BenchmarkImageAttribute(Tango::Attribute &attr)
{
	DEBUG_STREAM << "CppBenchmarkTarget::read_BenchmarkImageAttribute(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(CppBenchmarkTarget::read_BenchmarkImageAttribute) ENABLED START -----*/
	//	Set the attribute value
	image_reads_count++;
	attr.set_value(attr_BenchmarkImageAttribute_read,
		       attr_BenchmarkImageAttribute_y,
		       attr_BenchmarkImageAttribute_x);

	/*----- PROTECTED REGION END -----*/	//	CppBenchmarkTarget::read_BenchmarkImageAttribute
}
//--------------------------------------------------------
/**
 *	Write attribute BenchmarkImageAttribute related method
 *	Description: benchmark image attribute
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Image max = 4096 x 4096
 */
//--------------------------------------------------------
void CppBenchmarkTarget::write_BenchmarkImageAttribute(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "CppBenchmarkTarget::write_BenchmarkImageAttribute(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve number of write values
	int	w_length = attr.get_write_value_length();

	//	Retrieve pointer on write values (Do not delete !)
	const Tango::DevDouble	*w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(CppBenchmarkTarget::write_BenchmarkImageAttribute) ENABLED START -----*/
	image_writes_count++;
	attr_BenchmarkImageAttribute_length = w_length;
	for(int i = 0; i < w_length; i++)
	  attr_BenchmarkImageAttribute_read[i] = w_val[i];

	/*----- PROTECTED REGION END -----*/	//	CppBenchmarkTarget::write_BenchmarkImageAttribute
}

//--------------------------------------------------------
/**
 *	Method      : CppBenchmarkTarget::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void CppBenchmarkTarget::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(CppBenchmarkTarget::add_dynamic_attributes) ENABLED START -----*/

	//	Add your own code to create and add dynamic attributes if any

	/*----- PROTECTED REGION END -----*/	//	CppBenchmarkTarget::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Read pipe BenchmarkPipe related method
 *	Description: benchmark pipe
 */
//--------------------------------------------------------
void CppBenchmarkTarget::read_BenchmarkPipe(Tango::Pipe &pipe)
{
	DEBUG_STREAM << "CppBenchmarkTarget::read_BenchmarkPipe(Tango::Pipe &pipe) entering... " << endl;
	/*----- PROTECTED REGION ID(CppBenchmarkTarget::read_BenchmarkPipe) ENABLED START -----*/

	//	Add your own code here
	pipe_reads_count++;

	pipe.set_root_blob_name(pipe_blob_name);
	pipe.set_data_elt_names(pipe_element_names);
	for(size_t i=0; i!=pipe_element_names.size(); i++)
	  {
	    int dl = 666;
	    pipe << dl;
	  }
	/*----- PROTECTED REGION END -----*/	//	CppBenchmarkTarget::read_BenchmarkPipe
}
//--------------------------------------------------------
/**
 *	Write pipe BenchmarkPipe related method
 *	Description: benchmark pipe
 */
//--------------------------------------------------------
void CppBenchmarkTarget::write_BenchmarkPipe(Tango::WPipe &pipe)
{
	DEBUG_STREAM << "CppBenchmarkTarget::write_BenchmarkPipe(Tango::WPipe &pipe) entering... " << endl;
	/*----- PROTECTED REGION ID(CppBenchmarkTarget::write_BenchmarkPipe) ENABLED START -----*/

	//	Add your own code here
	pipe_writes_count++;
	pipe_name = pipe.get_name();
	pipe_blob_name = pipe.get_root_blob_name();
	pipe_element_names = pipe.get_data_elt_names();
	pipe_size = pipe.get_data_elt_nb();

	/*----- PROTECTED REGION END -----*/	//	CppBenchmarkTarget::write_BenchmarkPipe
}
//--------------------------------------------------------
/**
 *	Command State related method
 *	Description: This command gets the device state (stored in its device_state data member) and returns it to the caller.
 *
 *	@returns Device state
 */
//--------------------------------------------------------
Tango::DevState CppBenchmarkTarget::dev_state()
{
	DEBUG_STREAM << "CppBenchmarkTarget::State()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(CppBenchmarkTarget::dev_state) ENABLED START -----*/

	//	Add your own code

	Tango::DevState argout = m_state;
	/*----- PROTECTED REGION END -----*/	//	CppBenchmarkTarget::dev_state
	set_state(argout);    // Give the state to Tango.
	if (argout!=Tango::ALARM)
		Tango::DeviceImpl::dev_state();
	return get_state();  // Return it after Tango management.
}
//--------------------------------------------------------
/**
 *	Command Status related method
 *	Description: This command gets the device status (stored in its device_status data member) and returns it to the caller.
 *
 *	@returns Device status
 */
//--------------------------------------------------------
Tango::ConstDevString CppBenchmarkTarget::dev_status()
{
	DEBUG_STREAM << "CppBenchmarkTarget::Status()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(CppBenchmarkTarget::dev_status) ENABLED START -----*/

	string	status = "State is ON";
	if (m_state == Tango::RUNNING){
	  status = "State is RUNNING";
	}
	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	CppBenchmarkTarget::dev_status
	set_status(status);               // Give the status to Tango.
	return Tango::DeviceImpl::dev_status();  // Return it.
}
//--------------------------------------------------------
/**
 *	Command BenchmarkCommand related method
 *	Description: benchmark command
 *
 */
//--------------------------------------------------------
void CppBenchmarkTarget::benchmark_command()
{
	DEBUG_STREAM << "CppBenchmarkTarget::BenchmarkCommand()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(CppBenchmarkTarget::benchmark_command) ENABLED START -----*/

	//	Add your own code
	command_calls_count++;
	/*----- PROTECTED REGION END -----*/	//	CppBenchmarkTarget::benchmark_command
}
//--------------------------------------------------------
/**
 *	Command SetSpectrumSize related method
 *	Description: set spectrum size
 *
 *	@param argin spectrum size
 */
//--------------------------------------------------------
void CppBenchmarkTarget::set_spectrum_size(Tango::DevLong argin)
{
	DEBUG_STREAM << "CppBenchmarkTarget::SetSpectrumSize()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(CppBenchmarkTarget::set_spectrum_size) ENABLED START -----*/

	//	Add your own code
	attr_BenchmarkSpectrumAttribute_length = argin;
	/*----- PROTECTED REGION END -----*/	//	CppBenchmarkTarget::set_spectrum_size
}
//--------------------------------------------------------
/**
 *	Command SetImageSize related method
 *	Description: set image size
 *
 *	@param argin image size
 */
//--------------------------------------------------------
void CppBenchmarkTarget::set_image_size(const Tango::DevVarLongArray *argin)
{
	DEBUG_STREAM << "CppBenchmarkTarget::SetImageSize()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(CppBenchmarkTarget::set_image_size) ENABLED START -----*/

	//	Add your own code
	long argin_length = argin->length();
	if(argin_length != 2)
	  throw std::invalid_argument( "received negative value" );
	attr_BenchmarkImageAttribute_x = (*argin)[0];
	attr_BenchmarkImageAttribute_y = (*argin)[1];
	attr_BenchmarkImageAttribute_length =
	  attr_BenchmarkImageAttribute_x *
	  attr_BenchmarkImageAttribute_y;

	/*----- PROTECTED REGION END -----*/	//	CppBenchmarkTarget::set_image_size
}
//--------------------------------------------------------
/**
 *	Command ResetCounters related method
 *	Description: reset counters
 *
 */
//--------------------------------------------------------
void CppBenchmarkTarget::reset_counters()
{
	DEBUG_STREAM << "CppBenchmarkTarget::ResetCounters()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(CppBenchmarkTarget::reset_counters) ENABLED START -----*/

	//	Add your own code
	always_executed_hook_count = 0;
	read_attribute_hardware_count = 0;
	write_attribute_counter_count = 0;

	scalar_reads_count = 0;
	spectrum_reads_count = 0;
	image_reads_count = 0;
	pipe_reads_count = 0;

	scalar_writes_count = 0;
	spectrum_writes_count = 0;
	image_writes_count = 0;
	pipe_writes_count = 0;

	command_calls_count = 0;
	gettimeofday(&reset_time, NULL);

	/*----- PROTECTED REGION END -----*/	//	CppBenchmarkTarget::reset_counters
}
//--------------------------------------------------------
/**
 *	Command StartEvents related method
 *	Description: starts a thread which pushes events of BenchmarkScalar Attribute values
 *
 */
//--------------------------------------------------------
void CppBenchmarkTarget::start_events()
{
	DEBUG_STREAM << "CppBenchmarkTarget::StartEvents()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(CppBenchmarkTarget::start_events) ENABLED START -----*/

	//	Add your own code
	double speriod(*attr_EventSleepPeriod_read);
	long usperiod;
	int* nret;
	scalar_events_count = 0;
	usperiod = static_cast<long>(speriod * 1000);
	if(event_thread){
	  event_thread->join((void**)&nret);
	  delete(event_thread);
	}
	event_thread = new EventThread(this, usperiod, m_mutex);
	m_state = Tango::RUNNING;
	/*----- PROTECTED REGION END -----*/	//	CppBenchmarkTarget::start_events
}
//--------------------------------------------------------
/**
 *	Command StopEvents related method
 *	Description: stops a thread which pushes events of BenchmarkScalar Attribute values
 *
 */
//--------------------------------------------------------
void CppBenchmarkTarget::stop_events()
{
	DEBUG_STREAM << "CppBenchmarkTarget::StopEvents()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(CppBenchmarkTarget::stop_events) ENABLED START -----*/

	//	Add your own code
	int* nret;
	{
	  omni_mutex_lock l(m_mutex);
	  event_thread->running = false;
	}
	bool loop = true;
	while(loop){
	  {
	    omni_mutex_lock l(m_mutex);
	    loop = not event_thread->finished;
	  }
	  usleep(10);
	}
	m_state = Tango::ON;
	long ecounter;
	{
	  omni_mutex_lock l(m_mutex);
	  scalar_events_count = event_thread->counter;
	  ecounter = event_thread->errorcounter;
	}

	/*----- PROTECTED REGION END -----*/	//	CppBenchmarkTarget::stop_events
}
//--------------------------------------------------------
/**
 *	Command PushEvent related method
 *	Description: pushes an event of BenchmarkScalarAttribute
 *
 */
//--------------------------------------------------------
void CppBenchmarkTarget::push_event()
{
	DEBUG_STREAM << "CppBenchmarkTarget::PushEvent()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(CppBenchmarkTarget::push_event) ENABLED START -----*/

 	//	Add your own code
	if(!std::string(*attr_EventAttribute_read).compare(std::string("BenchmarkScalarAttribute"))){
	  push_change_event("BenchmarkScalarAttribute",
			    attr_BenchmarkScalarAttribute_read);
	}
	else if(!std::string(*attr_EventAttribute_read).compare(std::string("BenchmarkSpectrumAttribute"))){
	  push_change_event("BenchmarkSpectrumAttribute",
			    attr_BenchmarkSpectrumAttribute_read);
	}
	else if(!std::string(*attr_EventAttribute_read).compare(std::string("BenchmarkImageAttribute"))){
	  push_change_event("BenchmarkImageAttribute",
			    attr_BenchmarkImageAttribute_read);
	}
	/*----- PROTECTED REGION END -----*/	//	CppBenchmarkTarget::push_event
}
//--------------------------------------------------------
/**
 *	Command CreateDynamicAttributes related method
 *	Description: creates dynamic attributes
 *
 *	@param argin attribute configuration
 */
//--------------------------------------------------------
void CppBenchmarkTarget::create_dynamic_attributes(const Tango::DevVarLongArray *argin)
{
	DEBUG_STREAM << "CppBenchmarkTarget::CreateDynamicAttributes()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(CppBenchmarkTarget::create_dynamic_attributes) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	CppBenchmarkTarget::create_dynamic_attributes
}
//--------------------------------------------------------
/**
 *	Method      : CppBenchmarkTarget::add_dynamic_commands()
 *	Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void CppBenchmarkTarget::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(CppBenchmarkTarget::add_dynamic_commands) ENABLED START -----*/

	//	Add your own code to create and add dynamic commands if any

	/*----- PROTECTED REGION END -----*/	//	CppBenchmarkTarget::add_dynamic_commands
}

/*----- PROTECTED REGION ID(CppBenchmarkTarget::namespace_ending) ENABLED START -----*/

//	Additional Methods

/*----- PROTECTED REGION END -----*/	//	CppBenchmarkTarget::namespace_ending
} //	namespace
